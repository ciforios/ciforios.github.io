---
layout:     post
title:      "Continuous Integration with Jenkins"
subtitle:   "Setting things up and running"
date:       2015-04-21 12:00:00
author:     "The Crew"
header-img: "img/ci-bg.jpg"
tags: [continuous-integration]
---

<img style="float:left" src="{{ site.url }}/img/jenkins/jenkinsLogo.png" />
Within this page we will describe how we set up Jenkins on our server to meet our requirements. We choose Jenkins because it's the common used CI software. We were considering to use XCode Server from Apple as a CI but due to the restrictions to Apple we were rejecting this idea. 


###Setup
Download the latest Jenkins war file from the offical [Jenkins homepage](http://jenkins-ci.org/). 
On our server machine we moved the war file into the applications folder and created there a separated Jenkins folder but this can be handled by everyone individually.<br>
Open the terminal and start Jenkins with  
{% highlight bash %}
	java -jar /Applications/Jenkins/jenkins.war &
{% endhighlight %}
The link to the war files depends where you saved it locally. After firing up the command you might face some error if you don't have at least Java Version 7 installed.<br>
***
If you need to upgrade to the latest Java Version you need to do following steps:<br>
1. Get the latest Java Version from [Oracle](https://www.java.com/de/download/mac_download.jsp).<br>
Once you run the installer it will install Java inside the ```/Library/Internet Plug-Ins/JavaAppletPlugin.plugin``` directory. But it doesn't overwrite ```/usr/bin/java``` which is the default directory used by Apple. You can check your version by typing in ```java -version ```<br>
2. In order to change the version to the just installed one run following commands:
{% highlight bash %}
	sudo rm /usr/bin/java
{% endhighlight %}
This command will remove the old symbol link which points to ```/System/Library/Frameworks/JavaVM.framework/Versions/A/Commands/java``` (That's Apple's 1.6 Java Version). Now you need to set a new symbolic link to the new Java version. 
{% highlight bash %}
	sudo ln -s /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin/Contents/Home/bin/java /usr/bin
{% endhighlight %}

After that try again if you can successfully start Jenkins via the command
{% highlight bash %}
	java -jar /Applications/Jenkins/jenkins.war &
{% endhighlight %}
Once done and you don't see any further error messages in the terminal you can reach Jenkins via the Webfrontend [http://localhost:8080/](http://localhost:8080/) and it should look like below.

![image](/img/jenkins/jenkins_overview.png)

<br>
### Make everything a little secure
By default no authentication is required at all. You should activate the security settings though, because Jenkins is usually reachable over the network and without this security feature it is easily accessable.<br>
In our case the following changes have been made under ```Manage Jenkins->Configure Global Security->Enable Security:```<br>
Here we activated ```Jenkins own user database``` under the section```Security Realm```, don't forget users to signup. Once everyone is registered you should deactivate this feature again. Otherwise it's still not secure because everyone can register themself and has admin rights. We left the Authorization field as it is on ```Logged-in users can do anything```.<br>
In case you use Gerrit you should also add a Jenkins user for Gerrit.
>Note: If you don't add security realm it will cause an error "/j_acegi_security_check".

Once you finished everything you shouldn't forget to save all your changes.

<br>
###Install Plugins to make your life easier
There is a multitude of Plugins for Jenkins. For our purposes we came to the conclusion that we need following Plugins:


* [**Slack Plugin**](https://wiki.jenkins-ci.org/display/JENKINS/Slack+Plugin)<br>
To annoy your team and send out notifications whenever someone changed something in the code, this tool is really awesome.

***
* [**GIT Plugin**](https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin)<br>
In order to use Git as a source control management you will need this Plugin.

***
* [**Gerrit Trigger**](https://wiki.jenkins-ci.org/display/JENKINS/Gerrit+Trigger)<br>
This will integrate Jenkins to Gerrit code review for triggering builds when a "patch set" is created. 

***
* [**XCode Integration**](https://wiki.jenkins-ci.org/display/JENKINS/Xcode+Plugin)<br>
Instead of writing a script where you access Xcode i.e. to build your project you can define those things in the Plugin. It will call Xcode command line tool for you. 


You can install those Plugins under "Manage Jenkins" -> "Manage Plugins". In this overview table select the tab "Available". Then you can choose the Plugin which you want to install and click on the button "Download now and install after restart". In the next section we gonna tell you what you need to configure that you can use it.


###Configuration
In order to use later those freshly installed Plugins we need to configure them.

####Slack
1. First you need to get a Slack account: [https://slack.com/](https://slack.com/).
2. Then you need to configure the Jenkins integration for Slack: [https://my.slack.com/services/new/jenkins-ci](https://my.slack.com/services/new/jenkins-ci). 
3. After that configure your Slack Plugin. Go to "Manage Jenkins" -> "Configure System". There you'll find a section about Slack "Global Slack Notifier Settings" where you can insert your settings.
<img style="float:left" src="{{ site.url }}/img/jenkins/settingsSlack.png" /><br>

***
####XCode Integration
That the Plugin is able to use the command line tools from Xcode you need to have Xcode installed on the machine. Download it from the AppStore and open it at least once that it can install necessary tools. Later on, if you want to run automated Unit Tests you also need to install some simulators otherwise the jobs won't work. Therefore go to the statusbar in Xcode to "Xcode"->"Preferences". Under the tab "Downloads" it will list you all simulators you can install.

***
####Gerrit Trigger
Configure the Gerrit Plugin in "Manage Jenkins" -> "Gerrit Trigger"<br>
Select "Add new server" on the left and enter a name for your Gerrit server and choose "Gerrit Server with Default Configurations".<br> 
Enter in the field for "Frontend URL" the server address of your Gerrit with port, in our case it is: http://192.168.8.10:8081/. To connect via SSH we need port: 29418. You then need to enter the username which you added in
[**Gerrit for Jenkins**](http://ciforios.github.io/2015/06/02/Gerrit-for-jenkins/), in our case Jenkins. Additionaly add the SSH Keyfile (private file) and password which you generated for Jenkins in Gerrit. Further changes can be made regarding the values which will be given from Jenkins to Gerrit once triggered.
>Note: There seems to be problem when you're using a passphrase for SSH. It will show the error "Bad SSH key or passphrase" when testing the connection, see [https://issues.jenkins-ci.org/browse/JENKINS-20879](https://issues.jenkins-ci.org/browse/JENKINS-20879)


###Jobs
Now you can start setting up your Jenkins Jobs. A job can have different tasks. Normally a project consists of different jobs which have different purposes like executing unit tests, building artefacts and so on.<br>
In our case we created two several Jobs which differentiate in a few settings.<br> 
**1. Build and test PatchSet on dev** - Building the project and run tests<br>
**2. Build and upload master branch** - Building the project, generating an ipa and push it via iTunes Connect to Testflight.

We describe the common settings how we use it in our project before we go into the detail changes for those jobs. For creating a new job, select "New Item" on the left side. Assign a project name, in our case "Build and test PatchSet on dev" as "Freestyle project" and select ok.
***
**Slack Notifications**<br>
In the first section are settings about Slack configured. We set a checkmark for "Notify Failure" and "Notify Success" so that we get notified in those two cases.
![image](/img/jenkins/jobSettingsSlack.png)<br>
That notifications are sent you need to add a "Post-build Actions", select "Slack notifications". Once done it should sent notifications.

***
**Source Code Management**

* In the section "Source Code Management" select Git. For the Repository URL you'll need to enter the URL of your Gerrit added with the project name if you use Gerrit, in our case "http://192.168.8.10:8081/badgeme-app". When not using Gerrit just link to your Git project.
* Further changes which are needed when using Gerrit
  * You need to click on the "Advance" button and under Refspec write "$GERRIT_REFSPEC". 
  * "Branches to build" needs "$GERRIT_BRANCH" as a parameter. 
  * In "Additional Behaviours" you need to add "Strategy for choosing what to build". There you would select as "choosing strategy" your Gerrit Trigger.<br>

![image](/img/jenkins/jobSettingsGit.png)

***
**Build Triggers**

As build trigger you select "Gerrit event".<br>

* "Choose a Server". There you select your Gerrit server which you set earlier in the overall settings.
* Next you need to decide when you want to trigger. We added "Patchset Created" that will trigger when a new change or patch set is uploaded.
![image](/img/jenkins/settingsGerritTrigger.png)
* Below "Dynamic Trigger Configuration" you specify what Gerrit projects to trigger a build on. In our case we said that we want to listen on the project pattern "badgeme-app" within the branch pattern with "dev_demo", which is our branch in our project. ![image](/img/jenkins/jobSettingsGerritTrigger.png)

