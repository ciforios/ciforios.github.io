---
layout:     post
title:      "Setting up Gerrit"
subtitle:   "How to"
date:       2015-05-30 12:35:33
author:     "The crew"
header-img: "img/post-bg-03.jpg"
tags: [gerrit]
---

##Setting up Gerrit

Setup:
download gerrit.war from [Official Gerrit page](code.google.com/p/gerrit)

execute 
{% highlight bash %}
java -jar gerrit.war init -d path/to/site/folder
{% endhighlight %}

This will create the folder you provide in the "-d" argument and start the initialisation dialog. You can run this command again on an already existing gerrit folder to change its configuration.

Below you can see the configuration dialog in our case. We went with the default options in most cases (except the http port to listen on).
{% highlight bash %}
bash-3.2$ java -jar /Applications/Gerrit/gerrit-2.11.war init -d badgeme
Using secure store: com.google.gerrit.server.securestore.DefaultSecureStore

*** Gerrit Code Review 2.11
*** 

Create '/Users/gerrit/Documents/gerrit/badgeme' [Y/n]? 

*** Git Repositories
*** 

Location of Git repositories   [git]: 

*** SQL Database
*** 

Database server type           [h2]: 

*** Index
*** 

Type                           [LUCENE/?]: 

*** User Authentication
*** 

Authentication method          [OPENID/?]: 

*** Review Labels
*** 

Install Verified label         [y/N]? 

*** Email Delivery
*** 

SMTP server hostname           [localhost]: 
SMTP server port               [(default)]: 
SMTP encryption                [NONE/?]: 
SMTP username                  : 

*** Container Process
*** 

Run as                         [gerrit]: 
Java runtime                   [/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/jre]: 
Copy gerrit-2.11.war to /Users/gerrit/Documents/gerrit/badgeme/bin/gerrit.war [Y/n]? 
Copying gerrit-2.11.war to /Users/gerrit/Documents/gerrit/badgeme/bin/gerrit.war

*** SSH Daemon
*** 

Listen on address              [*]: 
Listen on port                 [29418]: 

Gerrit Code Review is not shipped with Bouncy Castle Crypto SSL v151
  If available, Gerrit can take advantage of features
  in the library, but will also function without it.
Download and install it now [Y/n]? n
Generating SSH host key ... rsa(simple)... done

*** HTTP Daemon
*** 

Behind reverse proxy           [y/N]? 
Use SSL (https://)             [y/N]? 
Listen on address              [*]: 
Listen on port                 [8080]: 8081
Canonical URL                  [http://mrs.mmlab.mintern.mi.hdm-stuttgart.de:8081/]: 

*** Plugins
*** 

Installing plugins.
Install plugin download-commands version v2.11 [y/N]? 
Install plugin reviewnotes version v2.11 [y/N]? 
Install plugin singleusergroup version v2.11 [y/N]? 
Install plugin replication version v2.11 [y/N]? 
Install plugin commit-message-length-validator version v2.11 [y/N]? 
Initializing plugins.
No plugins found with init steps.

Initialized /Users/gerrit/Documents/gerrit/badgeme
Executing /Users/gerrit/Documents/gerrit/badgeme/bin/gerrit.sh start
Starting Gerrit Code Review: OK
Waiting for server on mrs.mmlab.mintern.mi.hdm-stuttgart.de:8081 ... OK
Opening http://mrs.mmlab.mintern.mi.hdm-stuttgart.de:8081/#/admin/projects/ ...OK
{% endhighlight %}

Now the gerrit server should be live and available on the server ip and specified port and on the "Canonical URL" gerrit shows in the end of the setup dialog.

##Login:
After setting up the server the next thing you will probably want to do is open the Gerrit page and log in (at least that's the first thing we wanted to do^^).

>At this point we ran into a little problem:<br>
>We used the default setting for authentication hoping it was a simple account management. The default being OpenID this was kind of true... The problem was, that Google had just stopped supporting OpenID (1 week before we started the project and switched zo OAuth) and Gerrit didn't support OAuth natively (there is a [plugin](https://github.com/davido/gerrit-oauth-provider "plugin") but we didn't get it runing as fast as we wanted) we decided to create new accounts at one of the pages proposed by Gerrit (some chose Yahoo ID, some Launchpad.net)

If you have access to an ldap server the easiest way to log in is probably using that server (you will have to do the configuration again and choose ldap as authentication method).

> The account of the first person who logs in is automatically turned into admin account.
> The admin can distribute rights to other users.


####Creating a Project:
Projects -> Create Project

Enter a project name
>NOTE: Renaming or deleting the repo is not possible in Gerrit (by default), so choose your name wisely or you will be stuck with a repsitory called "firstTestProject"...

Choose the Rights to inherit from<br>
If this is the first project you can just inherit from the default "all projects". Yo can also create a new project just to serve as a parent for other projects which then inherit the settings of the parent project.

####Cloning the project:
In projects -> list you should see all of your projects. After clicking on one of them you will see the options page for this project.<br>
In the Project options page you can see (amongst other settings) the URL to use for cloning the git repository.


####Deleting Projects:
Deleting projects is not possible by default (probably because projects might depend on other projects, so deleting on project in the chain could have severe ramifications for other projects).<br>
>there is a [plugin](https://gerrit-review.googlesource.com/#/admin/projects/plugins/delete-project) that allows deleting projects, but we just deleted the whole gerrit folder and ran the init comand again 

####Git:
Internally gerrit sets up a fully functional git repository which you can clone and push reviews to.<br>
Each project has a unique git url you can see in the project options.
>if you want to set up git replica on an external server make sure that the name of the repositories match in case you want to mirror multiple repos without specifing a destination address for each repo. We also needed to add credentials to the gerrit config. 

##Permissions:
####Projects -> Access
Can be set for groups, Project Owners, Admins and Registered Users.
Permissions include: Who is allowed to Read, Push, Submit changes. 
In addition it can be defined, how much influence certain groups should have over the reviewing process.
Permitted users can create Projects.


### Access
Pushing is prohibited<br>
Patch Sets need +2 "Code-Review" and +1 "Verified"

### Pushing commits to gerrit for reviewing
#####Creating "PatchSets" (commits that others should review):
Install git-review on your mac 
{% highlight bash %}
brew install git-review
{% endhighlight %}
(for installation on other operating systems see: http://www.mediawiki.org/wiki/Gerrit/git-review)

Rename the remote path of your gerrit folder to gerrit:
{% highlight bash %}
git remote rename origin gerrit
{% endhighlight %}

//Do your changes<br/>
//commit your changes<br/>
Push your changes to gerrit with git review. You can find the account information you have to enter after entering the following command, in your gerrit profile -> http login
{% highlight bash %}
git review [BRANCH]
{% endhighlight %}

###Gerrit and Branches
The branch to push to can be specified when submitting reviews.<br/>
Branches can be created using the Gerrit UI under Projects -> List -> [PROJECT_NAME] -> Branches
If you create e.g. a dev branch and want to point it to the current Revision of the branch with the name "master" just enter "master" in the Revision field.

## Setting up Gerrit for Jenkins (Gerrit Trigger)
The Jenkins Plugin "Gerrit Trigger" expects Gerrit to have the label "Verified" set, which is not by default included in the gerrit config.
The gerrit label can be added in:<br>
Projects -> List -> All Projects -> General -> Edit Config<br>
After adding the Verified Label, it is also necessary to add the permissions for groups to change the verified status of a review.
Projects -> List -> All Projects -> Access -> Edit<br>
Under the point "Reference: refs/heads/*" hit "Add Permission" and choose "Label Verified". Then add the groups that should be allowed to change the verified state. E.g. Admins and Non-Interactive Users (the group containing Jenkins).

Further info on Gerrit labels see: <br>
[https://gerrit-review.googlesource.com/Documentation/config-labels.html](https://gerrit-review.googlesource.com/Documentation/config-labels.html)<br>
Regarding the Gerrit Trigger "bug" see: <br>
[https://code.google.com/p/gerrit/issues/detail?id=1963](https://code.google.com/p/gerrit/issues/detail?id=1963)